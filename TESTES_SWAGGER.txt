# üöÄ GUIA COMPLETO DE TESTES SWAGGER - INVESTIMENTOS API
# Sprint 3 C# Challenge XP

## üìã COMO ACESSAR
URL Swagger: http://localhost:5171/swagger
Porta pode variar - verificar no terminal onde est√° rodando

## üìä DADOS PARA TESTES
CPF v√°lido: 52604928238 (sem pontos/tra√ßos)
Tipos v√°lidos: A√ß√£o, CDB, Tesouro, Fundo
Opera√ß√µes v√°lidas: compra, venda
CEPs para teste: 01310-100, 20040-020, 04038-001
S√≠mbolos para cota√ß√£o: AAPL, GOOGL, PETR4, VALE3

===============================================================================
## 1. CRUD COMPLETO (35%) - OPERA√á√ïES B√ÅSICAS
===============================================================================

### GET /api/investimentos - Listar Todos os Investimentos
M√©todo: GET
URL: /api/investimentos
Par√¢metros: Nenhum
Exemplo de Resposta:
[
  {
    "id": "6779cb87-c73b-4c85-9bfb-cad53a3d3a18",
    "userCpf": "52604928238",
    "tipo": "A√ß√£o",
    "codigo": "PETR4",
    "valor": 1000.50,
    "operacao": "compra",
    "criadoEm": "2025-10-10T14:30:00Z",
    "alteradoEm": "2025-10-10T14:30:00Z"
  }
]

### POST /api/investimentos - Criar Novo Investimento
M√©todo: POST
URL: /api/investimentos
Content-Type: application/json
Body (JSON):
{
  "userCpf": "52604928238",
  "tipo": "A√ß√£o",
  "codigo": "VALE3",
  "valor": 2500.00,
  "operacao": "compra"
}

Exemplo Alternativo:
{
  "userCpf": "52604928238",
  "tipo": "CDB",
  "codigo": "CDB001",
  "valor": 5000.00,
  "operacao": "compra"
}

### GET /api/investimentos/{id} - Buscar por ID
M√©todo: GET
URL: /api/investimentos/6779cb87-c73b-4c85-9bfb-cad53a3d3a18
Par√¢metros: id (GUID do investimento)
Nota: Use um ID real retornado pelo GET all ou POST

### GET /api/investimentos/usuario/{cpf} - Investimentos por Usu√°rio
M√©todo: GET
URL: /api/investimentos/usuario/52604928238
Par√¢metros: userCpf (CPF sem formata√ß√£o)

### PUT /api/investimentos/{id} - Atualizar Investimento
M√©todo: PUT
URL: /api/investimentos/6779cb87-c73b-4c85-9bfb-cad53a3d3a18
Content-Type: application/json
Body (JSON):
{
  "id": "6779cb87-c73b-4c85-9bfb-cad53a3d3a18",
  "userCpf": "52604928238",
  "tipo": "A√ß√£o",
  "codigo": "PETR4",
  "valor": 1500.00,
  "operacao": "compra"
}

### DELETE /api/investimentos/{id} - Excluir Investimento
M√©todo: DELETE
URL: /api/investimentos/6779cb87-c73b-4c85-9bfb-cad53a3d3a18
Par√¢metros: id (GUID do investimento)
Resposta: 204 No Content

===============================================================================
## 2. CONSULTAS LINQ (10%) - PESQUISAS AVAN√áADAS
===============================================================================

### GET /api/investimentos/tipo/{tipo} - Filtrar por Tipo
M√©todo: GET
URLs para testar:
- /api/investimentos/tipo/A√ß√£o
- /api/investimentos/tipo/CDB
- /api/investimentos/tipo/Tesouro
- /api/investimentos/tipo/Fundo

### GET /api/investimentos/operacao/{operacao} - Filtrar por Opera√ß√£o
M√©todo: GET
URLs para testar:
- /api/investimentos/operacao/compra
- /api/investimentos/operacao/venda

### GET /api/investimentos/total-valor/{cpf} - Valor Total por Usu√°rio
M√©todo: GET
URL: /api/investimentos/total-valor/52604928238
Par√¢metros: userCpf
Exemplo de Resposta:
{
  "userCpf": "52604928238",
  "valorTotal": 15750.50
}

### GET /api/investimentos/recentes - Investimentos Recentes
M√©todo: GET
URLs para testar:
- /api/investimentos/recentes (padr√£o 30 dias)
- /api/investimentos/recentes?days=7
- /api/investimentos/recentes?days=90
Par√¢metros: days (opcional, padr√£o: 30)

### GET /api/investimentos/resumo-por-tipo - Resumo Agrupado
M√©todo: GET
URL: /api/investimentos/resumo-por-tipo
Par√¢metros: Nenhum
Exemplo de Resposta:
[
  {
    "tipo": "A√ß√£o",
    "totalInvestimentos": 5,
    "valorTotal": 15000.00,
    "valorMedio": 3000.00
  },
  {
    "tipo": "CDB",
    "totalInvestimentos": 2,
    "valorTotal": 8000.00,
    "valorMedio": 4000.00
  }
]

### GET /api/investimentos/usuarios/cpfs - Lista CPFs √önicos
M√©todo: GET
URL: /api/investimentos/usuarios/cpfs
Par√¢metros: Nenhum
Exemplo de Resposta:
[
  "52604928238",
  "12345678901",
  "98765432100"
]

===============================================================================
## 3. APIS EXTERNAS (20%) - INTEGRA√á√ïES
===============================================================================

### GET /api/investimentos/cotacao/{symbol} - Alpha Vantage API
M√©todo: GET
URLs para testar:
- /api/investimentos/cotacao/AAPL (Apple)
- /api/investimentos/cotacao/GOOGL (Google)
- /api/investimentos/cotacao/PETR4 (Petrobras)
- /api/investimentos/cotacao/VALE3 (Vale)
Par√¢metros: symbol (c√≥digo do ativo)
Exemplo de Resposta:
{
  "symbol": "AAPL",
  "data": {
    "Global Quote": {
      "01. symbol": "AAPL",
      "02. open": "150.00",
      "03. high": "152.00",
      "04. low": "149.00",
      "05. price": "151.50"
    }
  },
  "consultadoEm": "2025-10-10T14:30:00Z"
}

### GET /api/investimentos/cep/{cep} - ViaCEP API
M√©todo: GET
URLs para testar:
- /api/investimentos/cep/01310-100 (Av. Paulista, SP)
- /api/investimentos/cep/20040020 (Centro, RJ)
- /api/investimentos/cep/04038-001 (Vila Ol√≠mpia, SP)
Par√¢metros: cep (com ou sem h√≠fen)
Exemplo de Resposta:
{
  "cep": "01310-100",
  "endereco": {
    "cep": "01310-100",
    "logradouro": "Avenida Paulista",
    "complemento": "",
    "bairro": "Bela Vista",
    "localidade": "S√£o Paulo",
    "uf": "SP"
  },
  "consultadoEm": "2025-10-10T14:30:00Z"
}

### GET /api/investimentos/bitcoin-price - CoinGecko API
M√©todo: GET
URL: /api/investimentos/bitcoin-price
Par√¢metros: Nenhum
Exemplo de Resposta:
{
  "bitcoin": {
    "bitcoin": {
      "brl": 180000.50,
      "usd": 35000.25
    }
  },
  "consultadoEm": "2025-10-10T14:30:00Z"
}

===============================================================================
## üìã PASSO A PASSO PARA TESTAR NO SWAGGER
===============================================================================

1. Abrir navegador em: http://localhost:5171/swagger
2. Localizar o endpoint desejado na lista
3. Clicar no endpoint para expandir
4. Clicar no bot√£o "Try it out"
5. Preencher os par√¢metros necess√°rios:
   - Path parameters: Na URL (ex: {id}, {cpf})
   - Query parameters: Campos opcionais (ex: ?days=30)
   - Request body: JSON para POST/PUT
6. Clicar em "Execute"
7. Verificar a resposta:
   - Status code (200, 201, 404, etc.)
   - Response body (dados retornados)
   - Headers

===============================================================================
## üéØ SEQU√äNCIA RECOMENDADA DE TESTES
===============================================================================

### TESTE B√ÅSICO (Verificar se est√° funcionando)
1. GET /api/investimentos (listar todos)
2. GET /api/investimentos/usuarios/cpfs (ver CPFs dispon√≠veis)
3. GET /api/investimentos/bitcoin-price (testar API externa)

### TESTE CRUD COMPLETO
1. POST - Criar um investimento novo
2. GET - Listar todos (verificar se foi criado)
3. GET/{id} - Buscar o criado pelo ID
4. PUT/{id} - Atualizar o investimento
5. DELETE/{id} - Excluir o investimento

### TESTE CONSULTAS LINQ
1. GET /api/investimentos/tipo/A√ß√£o
2. GET /api/investimentos/operacao/compra
3. GET /api/investimentos/total-valor/52604928238
4. GET /api/investimentos/recentes?days=30
5. GET /api/investimentos/resumo-por-tipo

### TESTE APIS EXTERNAS
1. GET /api/investimentos/cotacao/AAPL
2. GET /api/investimentos/cep/01310-100
3. GET /api/investimentos/bitcoin-price

===============================================================================
## ‚ö†Ô∏è POSS√çVEIS ERROS E SOLU√á√ïES
===============================================================================

### Erro 404 - Not Found
- Verificar se o ID existe (usar GET all primeiro)
- Verificar se o CPF est√° correto (52604928238)
- Verificar se a URL est√° correta

### Erro 400 - Bad Request
- Verificar se todos os campos obrigat√≥rios est√£o preenchidos
- Verificar se o JSON est√° bem formatado
- Verificar se os tipos de dados est√£o corretos

### Erro 500 - Internal Server Error
- Verificar se o banco de dados est√° conectado
- Verificar logs da aplica√ß√£o no terminal
- Para APIs externas: pode ser limita√ß√£o de rate limit

### APIs Externas n√£o funcionando
- Alpha Vantage: usa chave "demo" (limitada)
- ViaCEP: gratuita, pode ter instabilidade
- CoinGecko: gratuita, pode ter rate limit

===============================================================================
## üìä VALIDA√á√ÉO DOS REQUISITOS (CHECKLIST)
===============================================================================

‚úÖ ASP.NET Core Web API e Entity Framework com CRUD completo (35%)
   - GET, POST, PUT, DELETE implementados
   - Repository pattern
   - Entity Framework com PostgreSQL

‚úÖ Pesquisas com LINQ (10%)
   - 6 endpoints com consultas LINQ diferentes
   - Where, GroupBy, Sum, Distinct, OrderBy

‚úÖ Publica√ß√£o em ambiente Cloud (15%)
   - Docker configurado
   - GitHub Actions para CI/CD
   - Deploy autom√°tico

‚úÖ Endpoints conectando com outras APIs (20%)
   - Alpha Vantage (cota√ß√µes)
   - ViaCEP (endere√ßos)
   - CoinGecko (Bitcoin)

‚úÖ Documenta√ß√£o do projeto (10%)
   - Swagger completo
   - README detalhado
   - Exemplos de uso

‚úÖ Apresentar arquitetura em diagramas (10%)
   - Diagramas de arquitetura
   - Fluxo de dados
   - Modelo de dados

===============================================================================
## üîó LINKS √öTEIS
===============================================================================

- Swagger UI: http://localhost:5171/swagger
- Reposit√≥rio: https://github.com/2025-Challenge-XP/Sprint_3_CSharp
- Documenta√ß√£o: README.md
- Arquitetura: ARCHITECTURE.md

===============================================================================
# Desenvolvido para Sprint 3 - C# Challenge XP Inc.
# Equipe: Andr√© Lambert, Felipe Cortez, Julia Lins, Luis Barreto, Victor Aranda
===============================================================================
