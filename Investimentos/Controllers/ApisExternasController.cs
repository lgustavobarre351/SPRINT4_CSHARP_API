using Microsoft.AspNetCore.Mvc;
using ProjetoInvestimentos.Services;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;

namespace ProjetoInvestimentos.Controllers;

/// <summary>
/// APIs externas e valida√ß√µes
/// </summary>
[ApiController]
[Route("api/[controller]")]
[SwaggerTag("3Ô∏è‚É£ APIS EXTERNAS - B3, HG Brasil e valida√ß√µes externas")]
public class ApisExternasController : ControllerBase
{
    private readonly HttpClient _httpClient;
    private readonly IB3ValidationService _b3ValidationService;
    private readonly IConfiguration _configuration;

    public ApisExternasController(HttpClient httpClient, IB3ValidationService b3ValidationService, IConfiguration configuration)
    {
        _httpClient = httpClient;
        _b3ValidationService = b3ValidationService;
        _configuration = configuration;
    }

    /// <summary>
    /// Lista c√≥digos de a√ß√µes da B3 com cota√ß√£o dispon√≠vel (LINQ)
    /// </summary>
    /// <returns>Lista de c√≥digos B3 com cota√ß√£o na API</returns>
    [HttpGet("codigos-b3")]
    [SwaggerOperation(
        Summary = "Lista c√≥digos de a√ß√µes da B3 com cota√ß√£o dispon√≠vel [LINQ]",
        Description = "üîç CONSULTA LINQ: Retorna apenas a√ß√µes que possuem cota√ß√£o dispon√≠vel na API Brapi. Lista curada e testada de a√ß√µes l√≠quidas da B3."
    )]
    [SwaggerResponse(200, "Lista de c√≥digos da B3 com cota√ß√£o", typeof(object))]
    public async Task<ActionResult<object>> GetB3Codes()
    {
        try
        {
            // Lista curada de a√ß√µes com alta liquidez que SEMPRE t√™m cota√ß√£o dispon√≠vel na Brapi
            var stocksWithQuotes = new List<string>
            {
                // Bancos
                "ITUB4", "BBDC4", "BBAS3", "SANB11", "BPAC11", "BBDC3", "ITUB3",
                
                // Petr√≥leo e Energia
                "PETR3", "PETR4", "VALE3", "PRIO3", "CSAN3", "RRRP3", "RECV3", "CPLE6",
                
                // Varejo
                "MGLU3", "LREN3", "ABEV3", "ASAI3", "PCAR3", "BTOW3", "AMER3", "VIVA3", "SOMA3",
                
                // Tecnologia
                "B3SA3", "TOTS3", "LWSA3", "POSI3",
                
                // Constru√ß√£o e Imobili√°rio
                "MRVE3", "CYRE3", "MULT3", "EZTC3", "TEND3", "JHSF3",
                
                // Industrial
                "WEGE3", "RAIL3", "RENT3", "SUZB3", "KLBN11", "EMBR3", "RAIZ4",
                
                // Siderurgia e Minera√ß√£o
                "CSNA3", "GGBR4", "USIM5", "GOAU4", "VALE5",
                
                // Utilities
                "ELET3", "ELET6", "CMIG4", "SBSP3", "TAEE11", "EGIE3", "CPLE3", "CPFE3", "SAPR11",
                
                // Sa√∫de
                "HAPV3", "QUAL3", "RDOR3", "FLRY3", "DASA3",
                
                // Educa√ß√£o
                "COGN3", "YDUQ3",
                
                // Alimentos
                "JBSS3", "MRFG3", "BEEF3", "SMTO3", "BRFS3", "SLCE3",
                
                // Telecomunica√ß√µes
                "VIVT3", "TIMS3",
                
                // Farm√°cias
                "RADL3", "PNVL3",
                
                // Log√≠stica
                "LOGN3", "CCRO3",
                
                // Avia√ß√£o
                "AZUL4", "GOLL4",
                
                // Papel e Celulose
                "SUZB3", "KLBN11",
                
                // Outros importantes
                "NTCO3", "IRBR3", "CASH3", "CVCB3", "IGTI11", "BBSE3",
                "AZZA3", "BRML3", "CRFB3", "CSMG3", "DIRR3", "ENGI11",
                "EQTL3", "GMAT3", "HYPE3", "INTB3", "ITSA4", "KLBN4",
                "LAME4", "LIGT3", "MDIA3", "MILS3", "MOVI3", "ODPV3",
                "PETZ3", "POMO4", "PRIO3", "PSSA3", "RANI3", "RAPT4",
                "SBFG3", "SHOW3", "SIMH3", "SMFT3", "STBP3", "TAEE4",
                "TIMS3", "TOTS3", "UGPA3", "USIM3", "VAMO3", "VIIA3",
                "VIVT4", "VULC3", "WIZC3", "YDUQ3"
            };

            // LINQ: Where para filtrar apenas c√≥digos que tamb√©m est√£o na lista do servi√ßo B3
            var allB3Codes = await _b3ValidationService.GetAllB3CodesAsync();
            var validatedStocks = stocksWithQuotes
                .Where(code => allB3Codes.Contains(code)) // LINQ: Where + Contains
                .OrderBy(code => code) // LINQ: OrderBy para ordenar alfabeticamente
                .ToList();

            return Ok(new
            {
                Success = true,
                Message = "C√≥digos B3 com cota√ß√£o dispon√≠vel (a√ß√µes l√≠quidas)",
                Data = new
                {
                    TotalValidadas = validatedStocks.Count, // LINQ: Count
                    TotalB3 = allB3Codes.Count,
                    Codes = validatedStocks.Take(50), // LINQ: Take para primeiros 50
                    AllCodes = validatedStocks // Lista completa ordenada
                }
            });
        }
        catch (Exception ex)
        {
            return BadRequest(new
            {
                Success = false,
                Erro = "Erro ao obter c√≥digos B3",
                Detalhes = ex.Message
            });
        }
    }

    /// <summary>
    /// Recarrega c√≥digos da B3 (LINQ)
    /// </summary>
    /// <returns>Status da opera√ß√£o</returns>
    [HttpPost("recarregar-b3")]
    [SwaggerOperation(
        Summary = "Recarrega c√≥digos da B3 [LINQ]",
        Description = "üîç CONSULTA LINQ: Usa Count() para contagem ap√≥s recarregamento. For√ßa o recarregamento da lista de c√≥digos da B3"
    )]
    public async Task<ActionResult<object>> ReloadB3Codes()
    {
        try
        {
            await _b3ValidationService.ReloadAsync();
            var codes = await _b3ValidationService.GetAllB3CodesAsync();
            
            return Ok(new
            {
                Success = true,
                Message = "C√≥digos B3 recarregados com sucesso",
                TotalCodes = codes.Count() // LINQ: Count para total de c√≥digos recarregados
            });
        }
        catch (Exception ex)
        {
            return BadRequest(new
            {
                Success = false,
                Erro = "Erro ao recarregar c√≥digos B3",
                Detalhes = ex.Message
            });
        }
    }

    /// <summary>
    /// Consulta cota√ß√£o de uma a√ß√£o
    /// </summary>
    /// <param name="symbol">C√≥digo da a√ß√£o</param>
    /// <returns>Cota√ß√£o atual</returns>
    [HttpGet("cotacao/{symbol}")]
    [SwaggerOperation(
        Summary = "Cota√ß√£o atual de a√ß√£o",
        Description = "Consulta a cota√ß√£o atual de uma a√ß√£o espec√≠fica usando Yahoo Finance (API gratuita, sem necessidade de chave). Retorna pre√ßo, varia√ß√£o, volume e dados de mercado."
    )]
    [SwaggerResponse(200, "Cota√ß√£o obtida com sucesso", typeof(object))]
    [SwaggerResponse(400, "Erro na consulta da cota√ß√£o")]
    [SwaggerResponse(404, "A√ß√£o n√£o encontrada")]
    public async Task<ActionResult<object>> GetStockQuote([Required] string symbol)
    {
        try
        {
            // Validar se o c√≥digo existe na B3
            var isValid = await _b3ValidationService.IsB3StockAsync(symbol.ToUpper());
            if (!isValid)
            {
                return NotFound(new
                {
                    Success = false,
                    Erro = "C√≥digo de a√ß√£o n√£o encontrado na B3",
                    Symbol = symbol.ToUpper(),
                    Message = "Verifique se o c√≥digo est√° correto usando /api/ApisExternas/codigos-b3"
                });
            }

            // Usar Yahoo Finance via query2.finance.yahoo.com - API GRATUITA
            // Para a√ß√µes brasileiras da B3, adicionar .SA no final do s√≠mbolo
            var yahooSymbol = $"{symbol.ToUpper()}.SA";
            var url = $"https://query2.finance.yahoo.com/v8/finance/chart/{yahooSymbol}?interval=1d&range=1d";

            // Criar requisi√ß√£o com headers adequados
            using var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            request.Headers.Add("Accept", "application/json");

            var response = await _httpClient.SendAsync(request);
            
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                return StatusCode((int)response.StatusCode, new
                {
                    Success = false,
                    Erro = "Erro ao consultar cota√ß√£o externa",
                    StatusCode = (int)response.StatusCode,
                    Message = $"N√£o foi poss√≠vel obter cota√ß√£o da a√ß√£o {symbol.ToUpper()}",
                    Details = errorContent
                });
            }

            var content = await response.Content.ReadAsStringAsync();
            var json = JsonSerializer.Deserialize<JsonElement>(content);

            // Estrutura do Yahoo Finance: chart.result[0]
            if (!json.TryGetProperty("chart", out var chart) ||
                !chart.TryGetProperty("result", out var results) ||
                results.ValueKind != JsonValueKind.Array ||
                results.GetArrayLength() == 0)
            {
                return NotFound(new
                {
                    Success = false,
                    Erro = "A√ß√£o n√£o encontrada",
                    Symbol = symbol.ToUpper(),
                    Message = "A API Yahoo Finance n√£o retornou dados para este s√≠mbolo"
                });
            }

            var result = results[0];
            var meta = result.GetProperty("meta");
            var indicators = result.GetProperty("indicators");
            var quote = indicators.GetProperty("quote")[0];

            // Extrair pre√ßos
            decimal regularMarketPrice = 0m;
            decimal previousClose = 0m;
            decimal open = 0m;
            decimal dayHigh = 0m;
            decimal dayLow = 0m;
            long volume = 0L;

            if (meta.TryGetProperty("regularMarketPrice", out var priceEl) && priceEl.ValueKind == JsonValueKind.Number)
                regularMarketPrice = priceEl.GetDecimal();
            
            if (meta.TryGetProperty("chartPreviousClose", out var prevEl) && prevEl.ValueKind == JsonValueKind.Number)
                previousClose = prevEl.GetDecimal();

            // Obter arrays de dados (√∫ltimo valor de cada)
            if (quote.TryGetProperty("open", out var openArr) && openArr.ValueKind == JsonValueKind.Array && openArr.GetArrayLength() > 0)
            {
                var lastOpen = openArr[openArr.GetArrayLength() - 1];
                if (lastOpen.ValueKind == JsonValueKind.Number)
                    open = lastOpen.GetDecimal();
            }

            if (quote.TryGetProperty("high", out var highArr) && highArr.ValueKind == JsonValueKind.Array && highArr.GetArrayLength() > 0)
            {
                var lastHigh = highArr[highArr.GetArrayLength() - 1];
                if (lastHigh.ValueKind == JsonValueKind.Number)
                    dayHigh = lastHigh.GetDecimal();
            }

            if (quote.TryGetProperty("low", out var lowArr) && lowArr.ValueKind == JsonValueKind.Array && lowArr.GetArrayLength() > 0)
            {
                var lastLow = lowArr[lowArr.GetArrayLength() - 1];
                if (lastLow.ValueKind == JsonValueKind.Number)
                    dayLow = lastLow.GetDecimal();
            }

            if (quote.TryGetProperty("volume", out var volArr) && volArr.ValueKind == JsonValueKind.Array && volArr.GetArrayLength() > 0)
            {
                var lastVol = volArr[volArr.GetArrayLength() - 1];
                if (lastVol.ValueKind == JsonValueKind.Number)
                    volume = lastVol.GetInt64();
            }

            // Calcular varia√ß√£o
            var variacao = regularMarketPrice - previousClose;
            var variacaoPercent = previousClose > 0 ? (variacao / previousClose) * 100 : 0;

            // Montar objeto de resposta
            var cotacao = new
            {
                Simbolo = symbol.ToUpper(),
                Nome = meta.TryGetProperty("longName", out var nameEl) ? nameEl.GetString() : 
                       meta.TryGetProperty("shortName", out var shortNameEl) ? shortNameEl.GetString() : symbol.ToUpper(),
                Preco = regularMarketPrice,
                Variacao = variacao,
                VariacaoPercent = Math.Round(variacaoPercent, 2),
                Abertura = open,
                MinimoDia = dayLow,
                MaximoDia = dayHigh,
                FechamentoAnterior = previousClose,
                Volume = volume,
                Moeda = meta.TryGetProperty("currency", out var currEl) ? currEl.GetString() : "BRL",
                Exchange = meta.TryGetProperty("exchangeName", out var exEl) ? exEl.GetString() : "B3"
            };

            return Ok(new
            {
                Success = true,
                Symbol = symbol.ToUpper(),
                Message = "Cota√ß√£o obtida com sucesso",
                Data = cotacao,
                Timestamp = DateTime.UtcNow,
                Source = "Yahoo Finance (Gratuita)"
            });
        }
        catch (Exception ex)
        {
            return BadRequest(new
            {
                Success = false,
                Erro = "Erro ao obter cota√ß√£o",
                Symbol = symbol,
                Detalhes = ex.Message
            });
        }
    }

    /// <summary>
    /// Valida c√≥digo de a√ß√£o
    /// </summary>
    /// <param name="symbol">C√≥digo para validar</param>
    /// <returns>Resultado da valida√ß√£o</returns>
    [HttpGet("validar-codigo/{symbol}")]
    [SwaggerOperation(
        Summary = "Validar c√≥digo de a√ß√£o B3",
        Description = "Verifica se um c√≥digo de a√ß√£o √© v√°lido na B3"
    )]
    public async Task<ActionResult<object>> ValidateB3Code([Required] string symbol)
    {
        try
        {
            var isValid = await _b3ValidationService.IsB3StockAsync(symbol.ToUpper());
            
            return Ok(new
            {
                Success = true,
                Symbol = symbol.ToUpper(),
                IsValid = isValid,
                Message = isValid ? "C√≥digo v√°lido na B3" : "C√≥digo n√£o encontrado na B3"
            });
        }
        catch (Exception ex)
        {
            return BadRequest(new
            {
                Success = false,
                Erro = "Erro ao validar c√≥digo",
                Symbol = symbol,
                Detalhes = ex.Message
            });
        }
    }

    /// <summary>
    /// Obt√©m pre√ßo atual do Bitcoin
    /// </summary>
    /// <returns>Pre√ßo do Bitcoin em BRL e USD</returns>
    /// <response code="200">Pre√ßo obtido com sucesso</response>
    /// <response code="500">Erro ao consultar pre√ßo</response>
    [HttpGet("bitcoin-price")]
    [SwaggerOperation(
        Summary = "Consulta pre√ßo do Bitcoin",
        Description = "Conecta com a API CoinGecko para obter o pre√ßo atual do Bitcoin em Real Brasileiro e D√≥lar Americano"
    )]
    [SwaggerResponse(200, "Pre√ßo do Bitcoin obtido", typeof(object))]
    [SwaggerResponse(500, "Erro ao consultar pre√ßo do Bitcoin")]
    public async Task<ActionResult<object>> GetBitcoinPrice()
    {
        try
        {
            // API p√∫blica do CoinGecko
            var url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=brl,usd";
            
            var response = await _httpClient.GetAsync(url);
            
            if (!response.IsSuccessStatusCode)
            {
                return StatusCode((int)response.StatusCode, new
                {
                    Success = false,
                    Erro = "Erro ao consultar API CoinGecko",
                    StatusCode = (int)response.StatusCode
                });
            }

            var content = await response.Content.ReadAsStringAsync();
            var data = JsonSerializer.Deserialize<JsonElement>(content);

            return Ok(new
            {
                Success = true,
                Message = "Pre√ßo do Bitcoin obtido com sucesso",
                Data = new
                {
                    Bitcoin = data,
                    ConsultadoEm = DateTime.UtcNow,
                    Fonte = "CoinGecko API"
                }
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new
            {
                Success = false,
                Erro = "Erro interno ao consultar Bitcoin",
                Detalhes = ex.Message
            });
        }
    }
}